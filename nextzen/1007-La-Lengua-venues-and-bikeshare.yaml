import: 
    # - https://www.nextzen.org/carto/walkabout-style/5/walkabout-style.zip
    - https://www.nextzen.org/carto/refill-style/8/refill-style.zip
    - https://mapzen-assets.s3.amazonaws.com/resources/demo.yaml
    #- https://raw.githubusercontent.com/tangrams/walkabout-style/gh-pages/layers/bike-interlay.yaml
    - https://www.nextzen.org/carto/walkabout-style/5/layers/bike-interlay.yaml
    # - https://www.nextzen.org/carto/refill-style/8/themes/detail-8.zip
    # - https://www.nextzen.org/carto/refill-style/8/themes/label-5.zip
    # - https://www.nextzen.org/carto/refill-style/8/themes/color-gray-gold.zip

styles:
    _text:
        base: text
        blend_order: 2
    _points:
        base: points
        blend_order: 3
    _lines:
        base: lines
        blend_order: 4

global:
    fade: 0.7
    sdk_path_overlay: false
    sdk_bike_overlay: true
    bike_darkgreen_color: [0.000,0.487,0.430,global.fade]
    bike_darkgreen_color_casing: [0.000,0.701,0.620,global.fade]
    bike_darkgreen_color_lite: [0.000,0.784,0.694,global.fade]
    # LABEL: tier 1 off road
    bike_darkgreen_label: [0.000,0.233,0.206,global.fade]
    # LABEL: tier 1 offroad
    bike_green_label: [0.063,0.474,0.294,global.fade]
    # tier 2 on-road protected
    bike_green_color: [0.272,0.663,0.435,global.fade]
    bike_green_color_casing: [0.258,0.789,0.534,global.fade]
    bike_green_color_lite: [0.289,0.876,0.593,global.fade]
    # tier 3 on-road minor road with or without sharrow / designation
    bike_lightgreen_color: [0.419,0.728,0.569,global.fade]
    bike_lightgreen_color_casing: [0.517,0.862,0.644,global.fade]
    bike_lightgreen_color_lite: [0.710,1.000,0.816,global.fade]
    # steps
    bike_step_color: [0.633,0.988,0.633,global.fade]
    #
    # BROWNS
    # tier 1 (dirt) wide tracks
    bike_brown_color: [0.575,0.394,0.330,global.fade]
    bike_brown_color_lite: [0.917,0.759,0.610,global.fade]
    # LABEL: tier 1 (dirt) wide tracks
    bike_brown_label: [0.559,0.338,0.269,global.fade]
    # tier 1 (dirt) narrow footway
    bike_lightbrown_color: [0.690,0.547,0.504,global.fade]
    bike_lightbrown_color_lite: [1.000,0.881,0.770,global.fade]
    #
    # ORANGES
    # tier 2 on-road protected
    bike_orange_color: [0.930,0.460,0.167,global.fade]
    bike_orange_color_casing: [0.976,0.631,0.541,global.fade]
    bike_orange_color_lite: [1.000,0.761,0.650,global.fade]
    # LABEL: tier 2 on-road protected
    bike_orange_label: [0.780,0.366,0.109,global.fade]
    #
    # tier 3 major roads get dashing in their casing
    # tier 3 on-road not protected
    bike_lightorange_color: [0.910,0.618,0.237,global.fade]
    bike_lightorange_color_casing: [1.000,0.749,0.480,global.fade]
    bike_lightorange_color_lite: [1.000,0.879,0.750,global.fade]
    # LABEL: tier 3 on road not protected
    bike_lightorange_label: [0.810,0.543,0.194,global.fade]
    #
    # BLUES
    bike_blue_color: [0.325,0.616,0.839,global.fade] #[0.273,0.332,0.780,global.fade]
    bike_blue_color_lite: [0.431,0.886,0.957,global.fade] #[0.357,0.750,0.870,global.fade]
    bike_blue_label: [0.502,0.792,0.880,global.fade]
    #
    # OTHERS
    # other situations
    bike_prohibited_color: [1.000,0.590,0.891,global.fade]
    bike_prohibited_color_lite: [0.939,0.854,0.988,global.fade]
    # NOTE: nvkelso 2017-04-19 what is this for?!
    left_right_lane: purple #[0.414,0.940,0.607,global.fade]
    # end note
    regional_network_highlight: [1.000,1.000,0.549,global.fade]
    no_bike_label: [1.000,0.510,0.869,global.fade]
    no_bike_color_lite: [1.000,0.898,0.918,global.fade]

sources:
    sf_stations:
        type: GeoJSON
        url: https://gist.githubusercontent.com/burritojustice/db69dae24a12f8e4db0d4b59d28a1853/raw/5653063a5cc8f8c4bd9cb6a4e4d149e832ebfec1/sf_stations.geojson

    sf_voronoi:
        type: GeoJSON
        url: https://gist.githubusercontent.com/burritojustice/db69dae24a12f8e4db0d4b59d28a1853/raw/cb18f8bb557d20969567bc1da66c485248678dbe/sf_bikeshare_voronoi_clipped.geojson
        url: https://gist.githubusercontent.com/burritojustice/db69dae24a12f8e4db0d4b59d28a1853/raw/5653063a5cc8f8c4bd9cb6a4e4d149e832ebfec1/sf_bikeshare_voronoi.geojson
    isochrone:
        type: GeoJSON
        url: 'https://matrix.mapzen.com/isochrone?json={"locations":[{"lat":37.7440667,"lon":-122.4214722}],"costing":"bicycle","contours":[{"time":5},{"time":10},{"time":15},{"time":20}]}'
        url_params:
            api_key: global.sdk_mapzen_api_key  # (be sure to add your API key to pull in polygons from the server https://mapzen.com/developers)

    venues:
        type: GeoJSON
        url: https://places.mapzen.com/v1/?method=mapzen.places.getNearby&
        url_params:
            api_key: global.sdk_mapzen_api_key
            latitude: 37.7440667
            longitude: -122.4214722
            radius: 400
            placetype: venue
            # is_current: 1
            # is_ceased: 0
            is_superseded: 0
            format: geojson
            per_page: 500
            extras: wof:tags,wof:concordances,mz:is_current,addr:housenumber,wof:supersedes,wof:superseded_by,sg:classifiers
            
layers:

                
    _sf_stations:
        data: { source: sf_stations}
        draw:
            _points:
                interactive: true
                collide: false
                
                color: |
                    function(){ 
                        if (feature.station_id == '147'){
                            return [1,0,0,0.7]
                            }
                        else {
                            return [0,0,0,0] 
                            }
                        }
                size: [[12,10px],[18,16px]]
                    
                outline:
                    # color: grey
                    color:  [1,0,1,0.4]
                            
                    width: 2px
                text:
                    style: _text
                    optional: true
                    # collide: false
                    # text_source: function(){return feature.Name}
                    # text_source: capacity
                    font:
                        style: bold
                        size: 10px
                        fill: black
                        stroke:
                            color: white
                            width: 3px
                # optional: true
    # _sf_voronoi:
    #     data: {source: sf_voronoi}
    #     draw:
    #         lines:
    #             color: blue
    #             order: 500
    #             width: 2px
    _isochrone_polygons:
        data: { source: isochrone }
        draw:
            _lines:
                width: 4px
                order: 500
                # order: |
                #     function() {
                #         return Math.floor(100 - ((feature.contour/120) * 50));
                #         }
                color: |
                    function() {
                        switch(feature.contour) {
                            case 5:
                                return [0,0,1]
                                break
                            case 10:
                                return [0,0,1,0.5]
                                break;
                            case 15:
                                return [0,0,1,0.3]
                                break;                            
                            default:
                                return [0,0,1,0.15]
                            }
                        // return feature.fill;
                        }
                outline:
                    color: white
                    width: 2px
    _venues:
        data: {source: venues}
        filter:
            any:
                - $zoom: {min: 15}
                # - 'mz:is_current': -1
        draw:
            _points:
                # color: [1,0,0,0.5]
                color: |
                    function(){

                        if (feature["mz:is_current"] == '0'){
                            return [0,1,0,0]
                            }
                        if (feature["mz:is_current"] == '-1' ){
                            return [0,1,0,0.5]
                            }
                        if (feature["wof:concordances"]["sfgov_rbl:id"] && (feature["mz:is_current"] == 1)){
                            return [0,0,1,0.5]
                            }
                        if (!feature["mz:is_current"]){
                            return [1,.5,0,0.4]
                            }
                        else {return [0,1,1,0.3]}
                        // if (feature["mz:is_current"] == null){
                        //     return [1,0,0,0.5]
                        //     }
                        }
                # size: 105x
                size: 16px
                outline:
                    width: 2px
                    color: black
                    # color: 
                collide: false
                text:
                    optional: true
                    style: _text
                    text_wrap: 12px
                    buffer: -10px

                    # collide: false
                    # text_source: wof:name
                    # text_source: addr:housenumber
                    # text_source: function(){return feature["wof:name"] + JSON.stringify(feature["sg:classifiers"]) }
                    text_source: |
                        function(){
                            var cats = []
                            for (var classifier in feature["sg:classifiers"]){
                                var category = feature["sg:classifiers"][classifier]["category"]
                                var subcat = feature["sg:classifiers"][classifier]["subcategory"]
                                var type = feature["sg:classifiers"][classifier]["type"]
                                var text = '(' + category + "/" + subcat + "/" + type + ')'
                                // cats += item
                                cats.push(text)
                            }
                            return feature["wof:name"]  + '\n' + cats.join() ;
                        }

                    # text_source: | 
                    #     function(){
                    #         return feature["wof:concordances"]["sfgov_rbl:id"]
                    #         }
                    # text_source: "wof:concordances"."sfgov_rbl:id"
                            
                    font:
                        style: bold
                        size: 10px
                        fill: black
                        stroke:
                            color: white
                            width: 3px


